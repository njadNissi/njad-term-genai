mathematical operations and operators
## Mathematical Operations and Operators: A Comprehensive Guide

Mathematical operations are the fundamental actions performed on numbers and variables to produce new values. They are the building blocks of any mathematical expression. These operations are represented by **operators**, which are symbols that indicate the type of operation to be performed.

Here's a breakdown of common mathematical operations and their corresponding operators:


1. Arithmetic Operations
====================================



* 
Addition
====================================

  `+`  Adds two operands together. 
    * Example: `5 + 3 = 8`
* 
Subtraction
====================================

  `-`  Subtracts the second operand from the first.
    * Example: `10 - 4 = 6`
* 
Multiplication
====================================

  `*`  Multiplies two operands. 
    * Example: `2 * 6 = 12`
* 
Division
====================================

  `/`  Divides the first operand by the second.
    * Example: `15 / 3 = 5`
* 
Exponentiation
====================================

  `^` or `**`  Raises the first operand to the power of the second.
    * Example: `3 ^ 2 = 9` or `3 ** 2 = 9`
* 
Modulus
====================================

 `%`  Returns the remainder of the division of the first operand by the second.
    * Example: `10 % 3 = 1`
* 
Floor Division
====================================

  `//`  Divides the first operand by the second and rounds the result down to the nearest whole number.
    * Example: `10 // 3 = 3`


2. Comparison Operations
====================================



* 
Equal to
====================================

  `==`  Checks if two operands are equal.
    * Example: `5 == 5` is True, `5 == 6` is False.
* 
Not equal to
====================================

  `!=`  Checks if two operands are not equal.
    * Example: `5 != 5` is False, `5 != 6` is True.
* 
Greater than
====================================

  `>`  Checks if the first operand is greater than the second.
    * Example: `5 > 3` is True, `5 > 5` is False.
* 
Less than
====================================

  `<`  Checks if the first operand is less than the second.
    * Example: `3 < 5` is True, `5 < 5` is False.
* 
Greater than or equal to
====================================

  `>=`  Checks if the first operand is greater than or equal to the second.
    * Example: `5 >= 5` is True, `3 >= 5` is False.
* 
Less than or equal to
====================================

  `<=`  Checks if the first operand is less than or equal to the second.
    * Example: `5 <= 5` is True, `5 <= 3` is False.


3. Logical Operations
====================================



* 
Logical AND
====================================

  `and`  Returns True only if both operands are True.
    * Example: `True and True` is True, `True and False` is False.
* 
Logical OR
====================================

  `or`  Returns True if at least one operand is True.
    * Example: `True or False` is True, `False or False` is False.
* 
Logical NOT
====================================

  `not`  Inverts the truth value of an operand.
    * Example: `not True` is False, `not False` is True.


4. Bitwise Operations (Operate on individual bits of data)
====================================



* 
Bitwise AND
====================================

  `&`  Performs a logical AND operation on each corresponding bit of the operands.
* 
Bitwise OR
====================================

  `|`  Performs a logical OR operation on each corresponding bit of the operands.
* 
Bitwise XOR
====================================

  `^`  Performs a logical XOR operation on each corresponding bit of the operands.
* 
Bitwise NOT
====================================

  `~`  Inverts each bit of the operand.
* 
Left Shift
====================================

  `<<`  Shifts the bits of the operand to the left by a specified number of positions.
* 
Right Shift
====================================

  `>>`  Shifts the bits of the operand to the right by a specified number of positions.


5. Assignment Operations
====================================



* 
Assignment
====================================

  `=`  Assigns the value of the right operand to the left operand.
    * Example: `x = 5` assigns the value 5 to the variable `x`.
* 
Compound Assignment
====================================

  Combines an arithmetic operator with assignment.
    * Example: `x += 5` is equivalent to `x = x + 5`. 
    * Other examples: `-=`, `*=`, `/=`, `%=`, `**=`, `//=`


6. Identity and Membership Operators
====================================



* 
Identity
====================================


    * 
is
====================================

  Checks if two operands refer to the same object in memory.
    * 
is not
====================================

  Checks if two operands refer to different objects in memory.
* 
Membership
====================================


    * 
in
====================================

  Checks if a value is present within a sequence (string, list, tuple, etc.).
    * 
not in
====================================

  Checks if a value is not present within a sequence.

**Order of Operations**

When multiple operations occur in an expression, the order in which they are performed matters. Here's the standard order of operations, often remembered by the acronym PEMDAS or BODMAS:

1. **Parentheses/Brackets** (Innermost to outermost)
2. **Exponents/Orders**
3. **Multiplication and Division** (From left to right)
4. **Addition and Subtraction** (From left to right)

**Example**

```
5 + 2 * 3 - 4 / 2
```

Following PEMDAS:

1. **2 * 3 = 6** (Multiplication)
2. **4 / 2 = 2** (Division)
3. **5 + 6 - 2 = 9** (Addition and Subtraction from left to right)

**Conclusion**

Understanding mathematical operations and operators is essential for any programming language or mathematical work. By grasping these concepts, you can construct complex expressions, solve problems, and build powerful algorithms. 
